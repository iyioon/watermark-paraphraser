

import numpy as np
from math import log


def levenshtein(x, y, gamma=0.0):
    """Pure Python implementation of the levenshtein function.

    Args:
        x: Array of token indices
        y: 2D array of probabilities
        gamma: Gap penalty parameter
    """
    n = len(x)
    m = len(y)

    npA = np.zeros((n + 1, m + 1), dtype=np.float32)

    for i in range(0, n + 1):
        for j in range(0, m + 1):
            if i == 0:
                npA[i][j] = j * gamma
            elif j == 0:
                npA[i][j] = i * gamma
            else:
                cost = log(1 - y[j - 1][x[i - 1]])
                npA[i][j] = npA[i - 1][j] + gamma
                if npA[i][j - 1] + gamma < npA[i][j]:
                    npA[i][j] = npA[i][j - 1] + gamma
                if npA[i - 1][j - 1] + cost < npA[i][j]:
                    npA[i][j] = npA[i - 1][j - 1] + cost

    return npA[n][m]
